{"version":3,"file":"index.modern.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/context/addContext.tsx","../src/api.ts","../src/components/Add.tsx","../src/context/AddReducer.ts","../src/context/AddProvider.tsx"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { createContext } from 'react'\nimport { AdvertiserAddMapping } from '../types'\n\ninterface ContextType {\n  registerAdd: (id: string) => void\n  addConversion: (id: string) => void\n  advertisers: Array<AdvertiserAddMapping>\n}\n\nconst initialContext: ContextType = {\n  advertisers: [],\n  registerAdd: () => {},\n  addConversion: () => {}\n}\n\nconst AppContext = createContext(initialContext)\n\nexport default AppContext\n","import {AddItem } from './types'\n\n//FIXME microbundle-crl not picking custom env\nconst API_URL = process.env.NODE_ENV === 'development' ? \n'http://localhost:3001' : 'https://https://add-bidder-qbtzze4rda-de.a.run.app'\n\nexport const getAdvertisers =  async (\n  count: number,\n  exclude: any,\n  clientId: string\n): Promise<string []> => {\n  console.log('exclude',exclude)\n  const response = await fetch(`${API_URL}/advertisers?count=${count}&clientId=${clientId}`)\n  return response.json()\n}\nexport const getAdvertise = async (\n  advertiser: string,\n  size: string\n): Promise<AddItem> => {\n  const response = await fetch(`${API_URL}/advertisers/${advertiser}/advertise?size=${size}&random=true`)\n  return response.json()\n}\n\nexport const recordConversions = async (uid: string): Promise<boolean> => {\n  const response = await fetch(`${API_URL}/advertise/${uid}/conversion`,{\n    method: 'POST'\n  })\n  return response.ok;\n}\n","import React, { useState, useContext, useEffect } from 'react'\nimport AppContext from '../context/addContext'\nimport styles from './styles.module.css'\nimport { AddItem, AdvertiserAddMapping } from '../types'\nimport { getAdvertise } from '../api'\n\ntype AddSize = 'banner' | 'square' | 'learderboard'\n\ninterface AddProps {\n  size: AddSize\n}\nconst ADD_DIMENSION = {\n  banner: {\n    width: 468,\n    height: 60\n  }\n}\n\nconst Add: React.FC<AddProps> = (props: AddProps) => {\n  const { registerAdd, advertisers, addConversion } = useContext(AppContext)\n  const [key, setKey] = useState<string>()\n  const [imageLoaded, setImageLoaded] = useState<boolean>(false)\n  const [addInfo, setAddInfo] = useState<AddItem>()\n  const { size } = props\n  const dimension = ADD_DIMENSION[size]\n\n  const onAddClicked = () => {\n    addInfo && addConversion(addInfo.uid)\n  }\n\n  const fetchAdvertise = async (advertiserAddMapping: AdvertiserAddMapping) => {\n    try {\n      const { advertiser } = advertiserAddMapping\n      const response: AddItem = await getAdvertise(advertiser, size)\n      setAddInfo(response)\n    } catch (e) {\n      console.error(e)\n    }\n  }\n  useEffect(() => {\n    const key = `${Math.floor(Math.random() * 1000000)}`\n    registerAdd(key)\n    setKey(key)\n  }, [])\n\n  useEffect(() => {\n    const advertiser = advertisers.find((a) => a.addKey === key)\n    if (advertiser && !addInfo) {\n      fetchAdvertise(advertiser)\n    }\n  }, [advertisers])\n\n  return (\n    <a\n      className={styles.add}\n      style={{\n        width: dimension.width,\n        height: dimension.height,\n        display: 'inline-block'\n      }}\n      key={key}\n      href={addInfo && addInfo.url}\n      target='_blank'\n      rel='noreferrer'\n      onClick={onAddClicked}\n    >\n      {imageLoaded && <span className={styles.add_label}>Ad</span>}\n      {!imageLoaded ? (\n        <img\n         decoding=\"async\"\n          src={`https://via.placeholder.com/${dimension.width}x${dimension.height}.png?text=AD`}\n        />\n      ) : null}\n      {addInfo && (\n        <img\n          decoding=\"async\"\n          onLoad={() => setImageLoaded(true)}\n          className={styles.add_img}\n          src={addInfo.img}\n          alt={addInfo.title}\n          style={{ visibility: imageLoaded ? 'visible' : 'hidden' }}\n        />\n      )}\n    </a>\n  )\n}\n\nexport default Add\n","export default (state: any, action: any) => {\n  const { type, payload } = action\n\n  switch (type) {\n    case 'GET_ADVERTISER_REQUEST':\n      return {\n        ...state,\n        addSlots: [...state.addSlots, payload]\n      }\n    case 'SET_ADVERTISERS':\n      return {\n        ...state,\n        advertisers: [...state.advertisers, ...action.payload],\n        addSlots: []\n      }\n    default:\n      return state\n  }\n}\n","import React, { useEffect, useReducer } from 'react'\nimport AppReducer from './AddReducer'\nimport AppContext from './addContext'\nimport { getAdvertisers, recordConversions } from '../api'\nimport { AdvertiserAddMapping } from '../types'\n\ntype addProviderProps = {\n  clientId: string\n}\n\nconst initialState = {\n  advertisers: [],\n  addSlots: []\n}\nconst AddProvider: React.FC<addProviderProps> = ({ clientId, children }) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState)\n  const { advertisers, addSlots } = state\n  const registerAdd = (key: string) => {\n    dispatch({\n      type: 'GET_ADVERTISER_REQUEST',\n      payload: key\n    })\n  }\n\n  const addConversion = async (uid: string) => {\n    try {\n      await recordConversions(uid)\n    } catch (err) {\n      console.log(err)\n    }\n  }\n  const fetchAdvisers = async (addSlots: string[]) => {\n    try {\n      const availableAdvertisers: string [] = await getAdvertisers(\n        addSlots.length,\n        advertisers,\n        clientId\n      )\n      const advertisersMapToAdd : AdvertiserAddMapping [] = \n      availableAdvertisers.map((a, index) => {\n        return {\n          advertiser: a,\n          addKey: addSlots[index]\n        }\n      })\n      console.log(advertisersMapToAdd)\n      dispatch({\n        type: 'SET_ADVERTISERS',\n        payload: advertisersMapToAdd\n      })\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  useEffect(() => {\n    if (!clientId) {\n      console.error('clientId is required.')\n    }\n    if (clientId && addSlots.length > 0) {\n      fetchAdvisers(addSlots)\n    }\n  }, [addSlots])\n  return (\n    <div>\n      <AppContext.Provider\n        value={{\n          advertisers: advertisers,\n          registerAdd: registerAdd,\n          addConversion: addConversion\n        }}\n      >\n        {children}\n      </AppContext.Provider>\n    </div>\n  )\n}\nexport default AddProvider\n"],"names":["initialContext","advertisers","registerAdd","addConversion","AppContext","createContext","API_URL","process","env","NODE_ENV","getAdvertisers","count","exclude","clientId","console","log","fetch","response","json","getAdvertise","advertiser","size","recordConversions","uid","method","ok","ADD_DIMENSION","banner","width","height","Add","props","useContext","useState","key","setKey","imageLoaded","setImageLoaded","addInfo","setAddInfo","dimension","onAddClicked","fetchAdvertise","advertiserAddMapping","e","error","useEffect","Math","floor","random","find","a","addKey","React","className","styles","add","style","display","href","url","target","rel","onClick","add_label","decoding","src","onLoad","add_img","img","alt","title","visibility","state","action","type","payload","addSlots","initialState","AddProvider","children","useReducer","AppReducer","dispatch","err","fetchAdvisers","length","availableAdvertisers","advertisersMapToAdd","map","index","Provider","value"],"mappings":"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"}